// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model Like {
  id       String  @id @default(cuid())
  authorId String
  postId   String?
  post     Post?   @relation(fields: [postId], references: [id], onDelete: Cascade)
  Reply    Reply?  @relation(fields: [replyId], references: [id], onDelete: Cascade)
  replyId  String?

  @@index([authorId, postId], name: "UniqueLike")
  @@index([postId])
  @@index([replyId])
}

model Retweet {
  id       String  @id @default(cuid())
  authorId String
  postId   String?
  post     Post?   @relation(fields: [postId], references: [id], onDelete: Cascade)
  Reply    Reply?  @relation(fields: [replyId], references: [id], onDelete: Cascade)
  replyId  String?

  @@index([authorId, postId], name: "UniqueRetweet")
  @@index([postId])
  @@index([replyId])
}

model Post {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  content   String   @db.VarChar(280)

  imageUrl String? // new field for image URL
  gifUrl   String?
  videoUrl String? // url for cloudinary

  authorId String
  likes    Like[]
  retweets Retweet[]
  isEdited Boolean   @default(false)
  dataType String    @default("post") // Added field to indicate data type

  // Field for one-to-many relationship with Reply
  replies Reply[]

  @@index([authorId])
}

model Reply {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  content   String   @db.VarChar(280)

  // Fields for image, gif, and video URLs
  imageUrl String?
  gifUrl   String?
  videoUrl String?

  likes    Like[]
  retweets Retweet[]
  isEdited Boolean   @default(false)

  // Field for author ID
  authorId String

  // Field for parent post ID
  postId   String?
  post     Post?   @relation(fields: [postId], references: [id])
  dataType String  @default("reply") // Added field to indicate data type

  // Fields for self-referential relationship
  parentId String?
  parent   Reply?  @relation("ReplyToReply", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies  Reply[] @relation("ReplyToReply")

  @@index([authorId])
  @@index([postId])
  @@index([parentId])
}

model Message {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  content   String   @db.VarChar(280)

  // Fields for image, gif, and video URLs
  imageUrl String?
  gifUrl   String?
  videoUrl String?

  // Field for reaction (emoji)
  reaction String?

  // Fields for author and recipient IDs
  authorId    String
  recipientId String

  // Additional fields you might consider
  isRead    Boolean @default(false)
  isDeleted Boolean @default(false)

  dataType String @default("message") // Added field to indicate data type

  @@index([authorId])
  @@index([recipientId])
}

model Follow {
  id          String @id @default(cuid())
  followerId  String
  followingId String

  @@index([followerId, followingId], name: "UniqueFollow")
}

model SearchHistory {
  id        String   @id @default(cuid())
  userId    String
  query     String
  createdAt DateTime @default(now())

  @@index([userId], name: "userIdIndex")
  @@index([createdAt], name: "createdAtIndex")
}
