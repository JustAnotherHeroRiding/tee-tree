import { type GetStaticProps, type NextPage } from "next";
import Head from "next/head";
import { api } from "~/utils/api";
import { PostView } from "~/components/ReusableElements/postview";
import { generateSsgHelper } from "~/server/helpers/ssgHelper";
import { PageLayout } from "~/components/layout";
import BackButton from "~/components/ReusableElements/BackButton";
import { CreatePostWizard } from "~/components/ReusableElements/CreatePostWizard";
import { useHomePage } from "~/components/Context/HomePageContext";

const SingleReplyPage: NextPage<{ id: string }> = ({ id }) => {
  const { data } = api.posts.getReplyById.useQuery({ id });

  const { homePage } = useHomePage();
 

  if (!data) return <div>404</div>;

  return (
    <>
      <Head>
        <title>{`${data.post.content} - @${data.author.username}`}</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <PageLayout>
        <div className="sticky top-0 z-50 flex h-16 items-center justify-between pb-2 backdrop-blur-sm">
          <h1 className="ml-16 mr-auto text-lg font-bold">Reply</h1>

          <BackButton />
        </div>
        <PostView {...data.parent} showLineBelow={true} />
        <PostView {...data} />
        <div className="px-6 mt-6">
        <CreatePostWizard
                  homePage={homePage}
                  src="reply"
                  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
                  parentType={data.post.dataType}
                  parentPostId={data.post.id}
                  showLineAbove={false}
                  placeholder="Post your reply!"
                />
                 {data.replies.map((reply) => (
          <PostView key={reply.post.id} {...reply} type="reply" />
        ))}
                </div>
       
      </PageLayout>
    </>
  );
};

export const getStaticProps: GetStaticProps = async (context) => {
  const helpers = generateSsgHelper();

  const id = context.params?.id;

  if (typeof id !== "string") throw new Error("id must be a string");

  await helpers.posts.getReplyById.prefetch({ id });

  return {
    props: {
      trpcState: helpers.dehydrate(),
      id,
    },
  };
};

export const getStaticPaths = () => {
  return {
    paths: [],
    fallback: "blocking",
  };
};
export default SingleReplyPage;
